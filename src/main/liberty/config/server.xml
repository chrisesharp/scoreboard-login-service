<server description="Sample Liberty server">

  <featureManager>
      <feature>microprofile-1.2</feature>
      <feature>jndi-1.0</feature>
      <feature>jsp-2.3</feature>
      <feature>servlet-3.1</feature>
      <feature>ssl-1.0</feature>
      <feature>mpJwt-1.0</feature>
      <feature>jsonp-1.0</feature>
  </featureManager>

    <keyStore id="defaultKeyStore" location="key.jks"  password="secret"/>

    <keyStore id="defaultTrustStore" location="truststore.jks" password="truststore"/>

  <sslDefault sslRef="DefaultSSLSettings"/>
  <ssl id="DefaultSSLSettings"
    keyStoreRef="defaultKeyStore" 
    trustStoreRef="defaultTrustStore"/>
  
  <httpEndpoint httpPort="${default.http.port}" httpsPort="${default.https.port}"
      id="defaultHttpEndpoint" host="*" />
      
    <!-- The MP JWT configuration that injects the caller's JWT into a ResourceScoped bean for inspection. -->
  <mpJwt id="jwtUserConsumer" 
    keyName="default" 
    audiences="scoreboard" 
    issuer="${jwt.issuer}"/>

  <!-- This is the keystore that will be used by SSL and by JWT.
       The keystore is built using the maven keytool plugin 
  <keyStore id="defaultKeyStore" 
    location="keystore.jceks" 
    type="JCEKS" 
    password="secret" />
  -->
  <!-- Signed JWT keystore info -->
    <jndiEntry jndiName="jwtKeyStore" value="${server.config.dir}/resources/security/key.jks"/>
<!--
    <jndiEntry jndiName="jwtKeyStore" value="${server.config.dir}/resources/security/keystore.jceks"/>
-->
    <jndiEntry jndiName="jwtKeyStorePassword" value="secret"/>
    <jndiEntry jndiName="jwtKeyStoreAlias" value="default"/>
  <!-- Github Application Info...  -->
    <jndiEntry jndiName="gitHubOAuthKey" value="${env.GITHUB_APP_ID}"/>
    <jndiEntry jndiName="gitHubOAuthSecret" value="${env.GITHUB_APP_SECRET}"/>
    <jndiEntry jndiName="authURL" value="${env.AUTH_URL}"/>
    <jndiEntry jndiName="authCallbackURLSuccess" value="${env.FRONT_END_SUCCESS_CALLBACK}"/>
    <jndiEntry jndiName="authCallbackURLFailure" value="${env.FRONT_END_FAIL_CALLBACK}"/>


  <!-- Automatically expand WAR files and EAR files -->
  <applicationManager autoExpand="true"/>

  <webApplication name="login" location="${app.location}"/>

</server>
